{"ast":null,"code":"import { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./notification.service\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(notificationService) {\n      this.notificationService = notificationService;\n    }\n\n    intercept(request, next) {\n      console.log(request.headers);\n      return next.handle(request).pipe(catchError(error => {\n        if (error.error instanceof ErrorEvent) {\n          // Client-side errors\n          this.notificationService.error$.next('Error: ' + error.error.message);\n        } else {\n          // Server-side errors\n          this.notificationService.error$.next('Error ' + error.status + ': ' + error.message);\n        } // return of([]);\n\n\n        return next.handle(request);\n      }));\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.NotificationService));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}