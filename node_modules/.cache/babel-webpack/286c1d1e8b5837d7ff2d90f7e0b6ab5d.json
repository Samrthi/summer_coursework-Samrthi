{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/card\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/button\";\n\nfunction SignupComponent_mat_error_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter a valid email address \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let SignupComponent = /*#__PURE__*/(() => {\n  class SignupComponent {\n    constructor(auth, router) {\n      this.auth = auth;\n      this.router = router;\n      this.signupForm = new FormGroup({\n        name: new FormControl(null, [Validators.required]),\n        email: new FormControl(null, [Validators.required, Validators.email]),\n        password: new FormControl(null, [Validators.required, Validators.minLength(10)])\n      });\n      this.matcher = new MyErrorStateMatcher();\n    }\n\n    get name() {\n      var _a;\n\n      return (_a = this.signupForm.get('name')) === null || _a === void 0 ? void 0 : _a.value;\n    }\n\n    get email() {\n      var _a;\n\n      return (_a = this.signupForm.get('email')) === null || _a === void 0 ? void 0 : _a.value;\n    }\n\n    get password() {\n      var _a;\n\n      return (_a = this.signupForm.get('password')) === null || _a === void 0 ? void 0 : _a.value;\n    }\n\n    signUp() {\n      if (this.name && this.email && this.password) {\n        this.auth.signup(this.name, this.email, this.password).subscribe(res => {\n          this.router.navigate(['/login']);\n        });\n      }\n    }\n\n  }\n\n  SignupComponent.ɵfac = function SignupComponent_Factory(t) {\n    return new (t || SignupComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n\n  SignupComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SignupComponent,\n    selectors: [[\"app-signup\"]],\n    decls: 26,\n    vars: 5,\n    consts: [[1, \"login-wrapper\"], [\"id\", \"signup-card\", 1, \"box\"], [\"id\", \"signup-form\", 3, \"formGroup\"], [\"appearance\", \"fill\", 1, \"input\"], [\"formControlName\", \"name\", \"matInput\", \"\"], [\"formControlName\", \"email\", \"matInput\", \"\"], [\"hintLabel\", \"Min 10 characters\", \"appearance\", \"fill\", 1, \"input\"], [\"type\", \"password\", \"matInput\", \"\", 3, \"errorStateMatcher\", \"formControl\"], [\"input\", \"\"], [\"align\", \"end\"], [4, \"ngIf\"], [\"id\", \"actions\"], [\"mat-flat-button\", \"\", \"id\", \"submit\", \"color\", \"primary\", 3, \"click\"]],\n    template: function SignupComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"mat-card\", 1);\n        i0.ɵɵelementStart(2, \"mat-card-header\");\n        i0.ɵɵelementStart(3, \"mat-card-title\");\n        i0.ɵɵtext(4, \"Sign up to Robert's List!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"form\", 2);\n        i0.ɵɵelementStart(6, \"mat-card-content\");\n        i0.ɵɵelementStart(7, \"mat-form-field\", 3);\n        i0.ɵɵelementStart(8, \"mat-label\");\n        i0.ɵɵtext(9, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"mat-form-field\", 3);\n        i0.ɵɵelementStart(12, \"mat-label\");\n        i0.ɵɵtext(13, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(16, \"mat-label\");\n        i0.ɵɵtext(17, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"input\", 7, 8);\n        i0.ɵɵelementStart(20, \"mat-hint\", 9);\n        i0.ɵɵtext(21);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(22, SignupComponent_mat_error_22_Template, 2, 0, \"mat-error\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"mat-card-actions\", 11);\n        i0.ɵɵelementStart(24, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function SignupComponent_Template_button_click_24_listener() {\n          return ctx.signUp();\n        });\n        i0.ɵɵtext(25, \"Sign up\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(19);\n\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.signupForm);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"errorStateMatcher\", ctx.matcher)(\"formControl\", ctx.password);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", (_r0.value == null ? null : _r0.value.length) || 0, \"/10\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.password.hasError(\"email\") && !ctx.password.hasError(\"required\"));\n      }\n    },\n    directives: [i3.MatCard, i3.MatCardHeader, i3.MatCardTitle, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i3.MatCardContent, i5.MatFormField, i5.MatLabel, i4.DefaultValueAccessor, i6.MatInput, i4.NgControlStatus, i4.FormControlName, i4.FormControlDirective, i5.MatHint, i7.NgIf, i3.MatCardActions, i8.MatButton, i5.MatError],\n    styles: [\"#signup-form[_ngcontent-%COMP%] {\\n  min-width: 150px;\\n  max-width: 300px;\\n  width: 100%;\\n  margin: auto;\\n}\\n\\n#signup-card[_ngcontent-%COMP%] {\\n  max-width: 400px;\\n  margin: 10% auto auto;\\n}\\n\\n.input[_ngcontent-%COMP%] {\\n  display: block;\\n  width: 100%;\\n  padding-top: 1rem;\\n}\\n\\n#submit[_ngcontent-%COMP%] {\\n  width: 50%;\\n}\\n\\n#actions[_ngcontent-%COMP%] {\\n  text-align: center;\\n}\"]\n  });\n  return SignupComponent;\n})();\nexport class MyErrorStateMatcher {\n  isErrorState(control, form) {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}