{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as mongoose from \"mongoose\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let StorageService = /*#__PURE__*/(() => {\n  class StorageService {\n    constructor(http) {\n      this.http = http;\n    } // GET\n\n\n    getCandidate(candidateId) {\n      return this.http.get('/api/candidate/' + candidateId).pipe(map(candidate => formatSkillsForFrontend(candidate)));\n    }\n\n    getEmployer(employerId) {\n      return this.http.get('/api/employer/' + employerId);\n    }\n\n    getJob(jobId) {\n      return this.http.get('/api/job/' + jobId);\n    }\n\n    getSkill(skillId) {\n      return this.http.get('/api/skill/' + skillId);\n    }\n\n    getSearchableCandidates() {\n      return this.http.get('/api/searchable_candidates/').pipe(map(candidates => candidates.map(candidate => formatSkillsForFrontend(candidate))));\n    }\n\n    getShortlistCandidates(jobId) {\n      return this.http.get('/api/shortlist/' + jobId).pipe(map(candidates => candidates.map(candidate => formatSkillsForFrontend(candidate))));\n    }\n\n    getInterestedJobs() {\n      return this.http.get('/api/interested_jobs/').pipe(map(job => job.map(job => formatSkillsForFrontend(job))));\n    }\n\n    getShortlistedJobs() {\n      return this.http.get('/api/shortlisted_jobs/').pipe(map(job => job.map(job => formatSkillsForFrontend(job))));\n    }\n\n    getEmployerJobs() {\n      return this.http.get('/api/employer_jobs').pipe(map(job => job.map(job => formatSkillsForFrontend(job))));\n    }\n\n    getJobList() {\n      return this.http.get('/api/job-list/').pipe(map(job => job.map(job => formatSkillsForFrontend(job))));\n    }\n\n    getSkillList() {\n      return this.http.get('/api/skill-list');\n    } // POST\n\n\n    addCandidate(candidate) {\n      const options = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http.post('/api/candidate', formatSkillsForBackend(candidate), options);\n    }\n\n    addEmployer(employer) {\n      const options = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http.post('/api/employer', employer, options);\n    }\n\n    addJob(job) {\n      const options = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      this.http.post('/api/job', formatSkillsForBackend(job), options).subscribe();\n    } // PUT\n\n\n    registerInterest(job_id) {\n      this.updateCandidate({\n        push$: {\n          interested_jobs: job_id\n        }\n      });\n    }\n\n    updateCandidate(update) {\n      const options = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      this.http.put('/api/candidate', formatSkillsForBackend(update), options).subscribe();\n    }\n\n    updateEmployer(update) {\n      const options = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      this.http.put('/api/employer', update, options).subscribe();\n    }\n\n    updateJob(job, id) {\n      const options = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      console.log(job);\n      this.http.put('/api/job/' + id, formatSkillsForBackend(job), options).subscribe();\n    } // DELETE\n\n\n    deleteCandidate() {\n      this.http.delete('/api/candidate').subscribe();\n    }\n\n    deleteEmployer() {\n      //TODO delete all associated jobs\n      this.http.delete('/api/employer').subscribe();\n    }\n\n    deleteJob(jobId) {\n      this.http.delete('/api/job/' + jobId).subscribe();\n    }\n\n  }\n\n  StorageService.ɵfac = function StorageService_Factory(t) {\n    return new (t || StorageService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  StorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StorageService,\n    factory: StorageService.ɵfac\n  }); // Helpers\n\n  return StorageService;\n})();\n\nfunction formatSkillsForBackend(instance) {\n  if (instance.skills) {\n    instance.skills = instance.skills.map(id => JSON.parse('{\"id\": \"' + mongoose.Types.ObjectId(id) + '\"}'));\n  }\n\n  return instance;\n}\n\nfunction formatSkillsForFrontend(instance) {\n  if (instance.skills) {\n    instance.skills = instance.skills.map(id => id[\"id\"]);\n  }\n\n  return instance;\n}","map":null,"metadata":{},"sourceType":"module"}