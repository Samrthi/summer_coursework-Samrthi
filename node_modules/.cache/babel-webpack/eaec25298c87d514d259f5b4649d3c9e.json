{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { of } from \"rxjs\";\nimport { Candidate } from \"./candidate\";\nimport { Employer } from \"./employer\";\nimport { takeUntil, delay } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./storage.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router, storage) {\n      this.http = http;\n      this.router = router;\n      this.storage = storage;\n    }\n\n    loggedIn() {\n      // should finish after 5 seconds\n      // definitely not the best way to do this, but I cannot currently find another way that works\n      this.http.get('/api/logged-in').pipe(takeUntil(of(true).pipe(delay(5000)))).subscribe(res => {\n        console.log(res[\"logged_in\"]);\n        return res[\"logged_in\"];\n      });\n      return false;\n    }\n\n    login(email, password) {\n      let credentials = {\n        email: email,\n        password: password\n      };\n      const options = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http.post('/api/login', credentials, options);\n    }\n\n    logout() {\n      this.router.navigate(['/login']);\n      this.http.get('/api/logout').subscribe();\n    }\n\n    signup(name, email, password) {\n      let account = {\n        name: name,\n        email: email,\n        password: password\n      };\n      const options = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http.post('/api/add-user', account, options);\n    }\n\n    deleteUser() {\n      return this.http.delete('api/delete-user/');\n    }\n\n    getName() {\n      return this.http.get('api/get-name');\n    }\n\n    addProfile(profile_type) {\n      this.http.get('api/has-profile').subscribe(res => {\n        let has_profile = res[\"has_profile\"];\n\n        if (has_profile) {\n          if (res['profile_type'] == \"candidate\") {\n            this.router.navigate(['/candidate-profile']);\n\n            if (res['profile_type'] == \"employer\") {\n              this.router.navigate(['/employer-profile']);\n            }\n          }\n        }\n      });\n      const options = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      let profile = {\n        profile_type: profile_type,\n        id: null\n      };\n\n      if (profile_type == \"candidate\") {\n        this.getName().subscribe(res => {\n          this.storage.addCandidate(new Candidate(res[\"name\"])).subscribe(res => {\n            profile.id = res[\"profile_id\"];\n            this.http.put('/api/add-profile', profile, options).subscribe(res => {\n              this.router.navigate(['/candidate-profile']);\n            });\n          });\n        });\n      } else if (profile_type == \"employer\") {\n        this.storage.addEmployer(new Employer(\"\")).subscribe(res => {\n          profile.id = res[\"profile_id\"];\n          this.http.put('/api/add-profile', profile, options).subscribe(res => {\n            this.router.navigate(['/employer-profile']);\n          });\n        });\n      }\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.StorageService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}